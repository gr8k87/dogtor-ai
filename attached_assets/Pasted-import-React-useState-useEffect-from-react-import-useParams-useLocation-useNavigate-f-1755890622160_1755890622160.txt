import React, { useState, useEffect } from "react";
import { useParams, useLocation, useNavigate } from "react-router-dom";
import { useHistory } from "../state/historyContext";
import { Button } from "../components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "../components/ui/card";

// Force everything into a safe string
function toSafeString(val: any): string {
  if (val === null || val === undefined) return "";
  if (typeof val === "string" || typeof val === "number") return String(val);

  if (React.isValidElement(val)) {
    const element = val as React.ReactElement<any>;
    const child = element.props?.children;
    if (typeof child === "string" || typeof child === "number") {
      return String(child);
    }
    return "[react-element]";
  }

  if (Array.isArray(val)) {
    return val.map((v) => toSafeString(v)).join(", ");
  }

  try {
    return JSON.stringify(val);
  } catch {
    return String(val);
  }
}

// Recursively sanitize an object or array
function sanitize(obj: any): any {
  if (Array.isArray(obj)) return obj.map((o) => sanitize(o));
  if (obj && typeof obj === "object" && !React.isValidElement(obj)) {
    const out: any = {};
    for (const key of Object.keys(obj)) {
      out[key] = sanitize(obj[key]);
    }
    return out;
  }
  return toSafeString(obj);
}

export default function Results() {
  const { caseId } = useParams<{ caseId: string }>();
  const location = useLocation();
  const navigate = useNavigate();
  const { addEntry } = useHistory();
  const [cards, setCards] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string>("");

  useEffect(() => {
    if (!caseId) {
      navigate("/");
      return;
    }

    const stateCards = location.state?.cards;
    if (stateCards) {
      const clean = sanitize(stateCards);
      setCards(clean);

      addEntry({
        form: { symptoms: "Analysis completed" },
        triage: {
          diagnosis: clean.diagnosis?.likely_condition || "Analysis complete",
          urgency: clean.diagnosis?.urgency?.level || "Unknown",
        },
      });

      setLoading(false);
      return;
    }

    fetch(`/api/diagnose/results/${caseId}`)
      .then(async (res) => {
        if (res.status === 404) {
          navigate("/");
          return null;
        }
        if (!res.ok) {
          const errorText = await res.text();
          throw new Error(`Results API failed: ${res.status} - ${errorText}`);
        }
        return res.json();
      })
      .then((data) => {
        if (data?.cards) {
          const clean = sanitize(data.cards);
          setCards(clean);
          addEntry({
            form: { symptoms: "Analysis completed" },
            triage: {
              diagnosis: clean.diagnosis?.likely_condition || "Analysis complete",
              urgency: clean.diagnosis?.urgency?.level || "Unknown",
            },
          });
        }
        setLoading(false);
      })
      .catch((err) => {
        setError(err.message || "Failed to load results");
        setLoading(false);
      });
  }, [caseId, location.state, navigate, addEntry]);

  if (loading) return <div className="p-6 text-center">Analyzing results…</div>;
  if (error) return <div className="p-6 text-center text-red-600">{error}</div>;
  if (!cards) return <div className="p-6 text-center">No results to display</div>;

  return (
    <div className="min-h-dvh flex flex-col bg-background">
      <header className="p-4 text-center">
        <h1 className="font-bold">Dogtor AI</h1>
        <div className="text-sm text-gray-500 mt-1">Step 3 of 3</div>
      </header>

      <main className="flex-1 p-4 max-w-2xl mx-auto w-full space-y-4">
        <div className="flex items-center mb-4">
          <Button
            variant="ghost"
            onClick={() => navigate("/")}
            className="text-blue-600 hover:text-blue-800 p-0"
          >
            ← Back to Diagnose
          </Button>
        </div>

        {/* Diagnosis */}
        <Card>
          <CardHeader>
            <CardTitle>{cards.diagnosis.title}</CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <p>
              <strong>Likely condition:</strong>{" "}
              {cards.diagnosis.likely_condition}
            </p>
            <div>
              <p className="font-medium mb-1">Other possibilities:</p>
              <ul className="text-sm space-y-1">
                {cards.diagnosis.other_possibilities.map((p: any, i: number) => (
                  <li key={i} className="ml-2">
                    • {p.name} ({p.likelihood} likelihood)
                  </li>
                ))}
              </ul>
            </div>
            <div>
              <p className="font-medium mb-1">Urgency:</p>
              <p className="text-sm">
                {cards.diagnosis.urgency.badge} {cards.diagnosis.urgency.level} —{" "}
                {cards.diagnosis.urgency.note}
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Care */}
        <Card>
          <CardHeader>
            <CardTitle>{cards.care.title}</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="list-disc pl-5 text-sm space-y-1">
              {cards.care.tips.map((t: any, i: number) => (
                <li key={i}>
                  {t.icon} {t.text}
                </li>
              ))}
            </ul>
            <p className="text-xs text-gray-500 mt-3">{cards.care.disclaimer}</p>
          </CardContent>
        </Card>

        {/* Costs */}
        <Card>
          <CardHeader>
            <CardTitle>{cards.costs.title}</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-xs text-gray-500 mb-3">
              {cards.costs.disclaimer}
            </p>
            <ul className="space-y-3 text-sm">
              {cards.costs.steps.map((s: any, i: number) => (
                <li key={i} className="space-y-1">
                  <div>
                    {s.icon} <strong>{s.name}</strong> – {s.likelihood}
                  </div>
                  <div className="text-gray-600">{s.desc}</div>
                  <div className="font-medium">{s.cost}</div>
                </li>
              ))}
            </ul>
          </CardContent>
        </Card>
      </main>
    </div>
  );
}
