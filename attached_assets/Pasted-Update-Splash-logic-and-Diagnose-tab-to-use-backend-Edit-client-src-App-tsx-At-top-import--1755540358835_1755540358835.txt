Update Splash logic and Diagnose tab to use backend.

Edit /client/src/App.tsx:
- At top: 
  import React, { useEffect, useState } from "react";
  import ImagePicker from "./components/ImagePicker";
  import DynamicForm from "./components/DynamicForm";

- Add a Splash component:
  function Splash({ onStart }:{onStart:()=>void}) {
    return (
      <div className="min-h-dvh flex flex-col items-center justify-center p-6 text-center">
        <h1 className="text-2xl font-bold">Dogtor AI</h1>
        <p className="text-sm text-gray-500 mt-1">Not a vet, just your first step.</p>
        <button onClick={onStart} className="mt-6 px-6 py-3 rounded-2xl bg-black text-white">Get started</button>
        <p className="mt-4 text-xs text-gray-400">For guidance only. Not a veterinary service.</p>
      </div>
    );
  }

- Replace DiagnoseView with a version that fetches schema:
  function DiagnoseView(){
    const [imageFile, setImageFile] = useState<File|null>(null);
    const [schema, setSchema] = useState<any[]|null>(null);
    const [formData, setFormData] = useState<Record<string,any>>({});
    const [errors, setErrors] = useState<Record<string,string>>({});
    const [loading, setLoading] = useState(true);
    const [errMsg, setErrMsg] = useState<string|null>(null);
    const [triage, setTriage] = useState<any|null>(null);

    useEffect(()=> {
      setLoading(true);
      fetch("/api/diagnose/init", { method:"POST", headers:{ "Content-Type":"application/json" }, body: "{}" })
        .then(r=>r.json())
        .then(j=>{ setSchema(j.suggested_questions||[]); setLoading(false); })
        .catch(e=>{ setErrMsg("Failed to load questions"); setLoading(false); });
    }, []);

    function validate(){
      const e: Record<string,string> = {};
      if (!imageFile) e.image = "Please add a photo";
      (schema||[]).forEach((f:any)=>{
        if (f.required && (formData[f.id]===undefined || formData[f.id]==='')) e[f.id]='Required';
      });
      setErrors(e);
      return Object.keys(e).length===0;
    }

    async function onSubmit(e: React.FormEvent){
      e.preventDefault();
      if (!validate()) return;
      const res = await fetch("/api/diagnose/triage", {
        method:"POST", headers:{ "Content-Type":"application/json" },
        body: JSON.stringify({ imagePresent: !!imageFile, answers: formData })
      });
      const j = await res.json();
      setTriage(j);
    }

    if (loading) return <div className="p-4">Loading questionsâ€¦</div>;
    if (errMsg) return <div className="p-4 text-red-600">{errMsg}</div>;

    return (
      <div className="space-y-4">
        <div className="rounded-2xl border p-4">
          <h2 className="font-semibold mb-2">Add photo</h2>
          <ImagePicker onChange={setImageFile} />
          {errors.image && <p className="text-red-600 text-sm mt-2">{errors.image}</p>}
        </div>
        <form onSubmit={onSubmit} className="rounded-2xl border p-4">
          <h2 className="font-semibold mb-2">Questions</h2>
          <DynamicForm schema={schema||[]} value={formData} onChange={setFormData} />
          {Object.entries(errors).filter(([k])=>k!=="image").length>0 &&
            <p className="text-red-600 text-sm mt-2">Please complete required fields.</p>}
          <button type="submit" className="mt-4 w-full h-12 rounded-xl bg-black text-white">Review</button>
        </form>
        {triage && (
          <div className="rounded-2xl border p-4">
            <h2 className="font-semibold mb-2">Triage</h2>
            <p className="text-sm">{triage.triage_summary}</p>
            <div className="mt-2">
              <p className="font-medium">Possible causes</p>
              <ul className="list-disc pl-5 text-sm">
                {(triage.possible_causes||[]).map((c:string)=> <li key={c}>{c}</li>)}
              </ul>
            </div>
            <div className="mt-2">
              <p className="font-medium">Recommended actions</p>
              <ul className="list-disc pl-5 text-sm">
                {(triage.recommended_actions||[]).map((a:string)=> <li key={a}>{a}</li>)}
              </ul>
            </div>
            <p className="mt-2 text-sm"><strong>Urgency:</strong> {triage.urgency_level}</p>
          </div>
        )}
      </div>
    );
  }

- Main App: add splash gate using localStorage flag:
  export default function App(){
    const [tab, setTab] = useState<Tab>("Diagnose");
    const [started, setStarted] = useState<boolean>(()=> localStorage.getItem("hasStarted")==="1");
    function begin(){ localStorage.setItem("hasStarted","1"); setStarted(true); }
    if (!started) return <Splash onStart={begin} />;

    return (
      <div className="min-h-dvh flex flex-col">
        <header className="p-4 text-center font-bold">Dogtor AI</header>
        <main className="flex-1 p-4">
          {tab==="Diagnose" && <DiagnoseView />}
          {tab==="History" && <div>History (placeholder)</div>}
          {tab==="Connect" && <div>Connect to Vet (placeholder)</div>}
        </main>
        <nav className="sticky bottom-0 inset-x-0 border-t bg-white">
          <div className="grid grid-cols-3 text-center">
            {tabs.map(t=>(
              <button key={t} onClick={()=>setTab(t)}
                className={`py-3 ${t===tab?"font-semibold":"text-gray-500"}`}
                aria-current={t===tab? "page":undefined}>
                {t}
              </button>
            ))}
          </div>
        </nav>
      </div>
    );
  }
